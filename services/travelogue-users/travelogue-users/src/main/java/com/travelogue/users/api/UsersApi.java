/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.travelogue.users.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.travelogue.users.models.Error;
import com.travelogue.users.models.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-18T18:11:14.373Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Create User", notes = "Create User API", response = Void.class, tags={ "Create User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden (Account Locked)", response = Void.class),
        @ApiResponse(code = 500, message = "Server Vault", response = Void.class) })
    
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = ""  )  @Valid @RequestBody User user);


    @ApiOperation(value = "Get User", notes = "Get User API", response = User.class, authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "GetUser", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = User.class),
        @ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
        @ApiResponse(code = 500, message = "Server Vault", response = Void.class) })
    
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<User> getUser();


    @ApiOperation(value = "Activate User Through Email", notes = "Activate User Through Email", response = User.class, tags={ "ActivateUser", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success", response = User.class),
        @ApiResponse(code = 400, message = "Bad Request ( Invalid Activate Token )", response = Void.class),
        @ApiResponse(code = 500, message = "Server Fault", response = Void.class) })
    
    @RequestMapping(value = "/users",
        method = RequestMethod.PUT)
    ResponseEntity<User> putUsers();

}
