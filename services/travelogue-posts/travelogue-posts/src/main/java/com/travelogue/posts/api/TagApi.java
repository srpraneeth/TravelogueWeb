/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.travelogue.posts.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.travelogue.posts.models.Tag;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-18T19:17:30.017Z")

@Api(value = "tag", description = "the tag API")
public interface TagApi {

	@ApiOperation(value = "Create Tag", notes = "Create Tag", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "CreateTag", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 409, message = "Conflict", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/tag", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> createTag(@ApiParam(value = "Tag to be created", required = true) @Valid @RequestBody Tag tag);

	@ApiOperation(value = "Search Tag", notes = "Search Tag", response = Tag[].class, responseContainer = "List", authorizations = {
			@Authorization(value = "JWT") }, tags = { "SearchTag", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Tag[].class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error[].class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 409, message = "Conflict", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/tag", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Tag>> searchTag(
			@NotNull @ApiParam(value = "Search parameter for Tag", required = true) @RequestParam(value = "q", required = true) String q,
			@ApiParam(value = "Search parameter for Tag Type") @RequestParam(value = "type", required = false) String type);

}
