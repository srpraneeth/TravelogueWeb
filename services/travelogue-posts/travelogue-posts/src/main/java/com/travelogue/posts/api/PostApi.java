/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.travelogue.posts.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.travelogue.posts.models.Comment;
import com.travelogue.posts.models.Post;
import com.travelogue.posts.models.Tag;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-18T19:17:30.017Z")

@Api(value = "post", description = "the post API")
public interface PostApi {

	@ApiOperation(value = "Comment to Post By Id", notes = "Comment to Post By Id", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "CommentToPostById", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "NotFound", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post/{id}/comment", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> commentToPostById(@ApiParam(value = "Post Id", required = true) @PathVariable("id") String id,
			@ApiParam(value = "Comment to the Post", required = true) @Valid @RequestBody Comment comment);

	@ApiOperation(value = "Create Post", notes = "Create Post API", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "CreatePost", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> createPost(@ApiParam(value = "Post", required = true) @Valid @RequestBody Post post);

	@ApiOperation(value = "Get Post By Id", notes = "Get Post By Id API", response = Post.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "GetPostById", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Success", response = Post.class),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "NotFound", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Post> getPostById(@ApiParam(value = "Post Id", required = true) @PathVariable("id") String id);

	@ApiOperation(value = "Like Comment By Post Id By Comment Id", notes = "Like Comment By Post Id By Comment Id", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "Like Comment By Post Id By Comment Id", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "NotFound", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post/{id}/comment/{Id}/like", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> likeCommentByPostIdByCommentId(
			@ApiParam(value = "Post Id", required = true) @PathVariable("id") String id,
			@ApiParam(value = "Comment Id", required = true) @PathVariable("Id") String id2);

	@ApiOperation(value = "Like Post By Id", notes = "Like Post By Id API", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "LikePostById", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "NotFound", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post/{id}/like", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> likePostById(@ApiParam(value = "Post Id", required = true) @PathVariable("id") String id);

	@ApiOperation(value = "Update Post", notes = "Update Post API", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "UpdatePost", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updatePost(@ApiParam(value = "Post", required = true) @Valid @RequestBody Post post);

	@ApiOperation(value = "Update Tags for Post By Id", notes = "Update Tags for Post By Id", response = Void.class, authorizations = {
			@Authorization(value = "JWT") }, tags = { "UpdateTagsForPostById", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Authentication Failed", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "NotFound", response = Void.class),
			@ApiResponse(code = 500, message = "Server Fault", response = Void.class) })

	@RequestMapping(value = "/post/{id}/tag", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateTagsForPostById(
			@ApiParam(value = "Post Id", required = true) @PathVariable("id") String id,
			@ApiParam(value = "Tags to be updated", required = true) @Valid @RequestBody List<Tag> tags);

}
